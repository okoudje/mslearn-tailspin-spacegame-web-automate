trigger:
  - '*'
  
variables:
    buildConfiguration: 'Release'
    dotnetSdkVersion: '3.1.300'
      
stages:
      - stage: 'Build'
        displayName: 'Build the web application'
        variables:     
          wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
          dotnetSdkVersion: '3.1.300'
        jobs:
          - job: 'build' 
            displayName: 'Job Build web App'
            pool:        
              vmImage: 'ubuntu-18.04'
              demands:
                - npm
            steps:
            - task: UseDotNet@2
              displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
              inputs:
                 version: '$(dotnetSdkVersion)'
    
            - task: Npm@1
              displayName: 'Run npm install'
              inputs:
                 verbose: false
    
            - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
              displayName: 'Compile Sass assets'
    
            - task: gulp@1
              displayName: 'Run gulp tasks'
    
            - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
              displayName: 'Write build info'
              workingDirectory: $(wwwrootDir)
    
            - task: DotNetCoreCLI@2
              displayName: 'Restore project dependencies'
              inputs:
                  command: 'restore'
                  projects: '**/*.csproj'
    
            - task: DotNetCoreCLI@2
              displayName: 'Build the project - $(buildConfiguration)'
              inputs:
                 command: 'build'
                 arguments: '--no-restore --configuration $(buildConfiguration)'
                 projects: '**/*.csproj'
    
            - task: DotNetCoreCLI@2
              displayName: 'Publish the project - $(buildConfiguration)'
              inputs:
                 command: 'publish'
                 projects: '$(System.DefaultWorkingDirectory)/**/Tailspin.SpaceGame.Web.csproj' # '**/*.csproj'
                 publishWebProjects: false
                 arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
                 zipAfterPublish: true
    
            - publish: '$(Build.ArtifactStagingDirectory)'
              artifact: drop
             
      - stage: 'Dev'
        displayName: 'Deploy DEV web application'
        dependsOn: Build       
        #   condition: and (succeeded() , eq(variables['Build.SourceBranchName'],variables['releaseBranchName']) )
        jobs:
          - job: Provisionning
            displayName: 'Provision infra' 
            variables: 
              - group: Release
            pool:
              vmImage: 'ubuntu-latest'                       
            steps:
             - script: echo My first job

          - deployment: DeployWeb
            displayName: 'Deployment of Space Game web application'
            pool:
              vmImage: 'Ubuntu-18.04'
            environment: 'dev'
            variables:
              - group : Release
            strategy:
             runOnce:
               deploy:
                 steps:
                   - download: current
                     artifact: drop
                   - task: AzureWebApp@1
                     displayName: 'Azure App Service Deploy : WebSite' 
                     inputs:
                       appType: webAppLinux
                       azureSubscription: 'Space-game-azurerm-connection'
                       appName: '$(webAppNameDEV)'
                       package: '$(Pipeline.Workspace)/drop/$(buildconfiguration)/*.zip'
      
    
  